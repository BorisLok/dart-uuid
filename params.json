{"name":"Dart-uuid","tagline":"Generate RFC4122(v1,v4,v5) UUIDs","body":"[![](https://drone.io/daegalus/dart-uuid/status.png)](https://drone.io/daegalus/dart-uuid/latest)\r\n\r\n# dart-uuid\r\n\r\nSimple, fast generation of [RFC4122](http://www.ietf.org/rfc/rfc4122.txt) UUIDS.\r\n\r\nHeavily based on node-uuid by Robert Kieffer (I even copied this readme over and modified it.) \r\nPrimarily becaue it works, well written, and so on.\r\n\r\nFeatures:\r\n\r\n* Generate RFC4122 version 1, version 4, or version 5 UUIDs\r\n* Runs in dartvm and hopefully browsers too.\r\n* Cryptographically strong random # generation on all platforms\r\n* [Annotated source code](http://daegalus.github.com/dart-uuid/Uuid/Uuid.html)\r\n\r\nNote: The AES implementation used is a custom written implementation, and I can not guarantee that it actually works. This is only until a standard library version for generating crypt strong random bytes is implemented.\r\n\r\n## Getting Started\r\n\r\n### Notes on Windows (currently)\r\n\r\n* Use cmd for pub\r\n* When actually running an application add // to the beginning of your Package-root directory ([Issue 4534](http://code.google.com/p/dart/issues/detail?id=4534))\r\n\r\n### Instructions\r\n\r\n1. Install and configure pub (http://www.dartlang.org/docs/pub-package-manager/#installing-and-configuring-pub)\r\n2. Open a command line and cd to your projects root folder\r\n3. In your pubspec, add an entry for dart-uuid to your dependencies (example below)\r\n3. pub install\r\n4. If you wish to run tests, go into packages/dart-uuid/ and run 'dart test/uuid_test.dart'\r\n\r\n### Pubspec\r\n\r\nThere are 2 options. Directly from git, or from pub.dartlang.org\r\n\r\npub.dartlang.org: (you can use 'any' instead of a version if you just want the latest always)\r\n```yaml\r\ndependencies:\r\n  uuid: 0.1.1\r\n```\r\n\r\ndirectly from github:\r\n```yaml\r\ndependencies:\r\n  uuid:\r\n    git: https://github.com/Daegalus/dart-uuid.git\r\n```\r\n\r\n```dart\r\n#import('https://raw.github.com/Daegalus/dart-uuid/master/lib/uuid.dart'); //pulls it directly from github.\r\n// OR\r\n#import('package:uuid/uuid.dart'); //Uses the local one in ./packages/uuid/lib/uuid.dart\r\n\r\nvar uuid = new Uuid();\r\n```\r\n\r\nThen create some ids ...\r\n\r\n```dart\r\n// Generate a v1 (time-based) id\r\nuuid.v1(); // -> '6c84fb90-12c4-11e1-840d-7b25c5ee775a'\r\n\r\n// Generate a v4 (random) id\r\nuuid.v4(); // -> '110ec58a-a0f2-4ac4-8393-c866d813b8d1'\r\n\r\n// Generate a v5 (namespace-name-sha1-based) id\r\nuuid.v5(uuid.NAMESPACE_URL, 'www.google.com'); // -> 'c74a196f-f19d-5ea9-bffd-a2742432fc9c'\r\n```\r\n\r\n## API\r\n\r\n### uuid.v1({Map options: null, List buffer: null, int offset: 0})\r\n\r\nGenerate and return a RFC4122 v1 (timestamp-based) UUID.\r\n\r\n* `options` - (Map) Optional uuid state to apply. Properties may include:\r\n\r\n  * `node` - (List) Node id as List of 6 bytes (per 4.1.6). Default: Randomnly generated ID.\r\n  * `clockseq` - (Number between 0 - 0x3fff) RFC clock sequence.  Default: An internally maintained clockseq is used.\r\n  * `msecs` - (Number) Time in milliseconds since unix Epoch.  Default: The current time is used.\r\n  * `nsecs` - (Number between 0-9999) additional time, in 100-nanosecond units. Ignored if `msecs` is unspecified. Default: internal uuid counter is used, as per 4.2.1.2.\r\n\r\n* `buffer` - (List) Array or buffer where UUID bytes are to be written.\r\n* `offset` - (Int) Starting index in `buffer` at which to begin writing.\r\n\r\nReturns `buffer`, if specified, otherwise the string form of the UUID\r\n\r\nExample: Generate string UUID with fully-specified options\r\n\r\n```dart\r\nuuid.v1(options: {\r\n    'node': [0x01, 0x23, 0x45, 0x67, 0x89, 0xab],\r\n    'clockSeq': 0x1234,\r\n    'mSecs': new Date(2011,11,01).millisecondsSinceEpoch,\r\n    'nSecs': 5678\r\n})   // -> \"1d6a6e2e-0457-11e1-9234-0123456789ab\"\r\n```\r\n\r\nExample: In-place generation of two binary IDs\r\n\r\n```dart\r\n// Generate two ids in an array\r\nvar myBuffer = new List(32); // -> []\r\nuuid.v1(buffer: myBuffer);   \r\n// -> [115, 189, 5, 128, 201, 91, 17, 225, 146, 52, 109, 0, 9, 0, 52, 128, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]\r\nuuid.v1(buffer: myBuffer, offset: 16);  \r\n// -> [115, 189, 5, 128, 201, 91, 17, 225, 146, 52, 109, 0, 9, 0, 52, 128, 115, 189, 5, 129, 201, 91, 17, 225, 146, 52, 109, 0, 9, 0, 52, 128]\r\n\r\n// Optionally use uuid.unparse() to get stringify the ids\r\nuuid.unparse(buffer: myBuffer);    // -> '73bd0580-c95b-11e1-9234-6d0009003480'\r\nuuid.unparse(buffer: myBuffer, offset: 16) // -> '73bd0581-c95b-11e1-9234-6d0009003480'\r\n```\r\n\r\n### uuid.v4({Map options: null, List buffer: null, int offset: 0})\r\n\r\nGenerate and return a RFC4122 v4 UUID.\r\n\r\n* `options` - (Map) Optional uuid state to apply. Properties may include:\r\n\r\n  * `random` - (Number[16]) List of 16 numbers (0-255) to use in place of randomly generated values\r\n  * `rng` - (Function) Random # generator to use. A Custom function that returns an list[16] of byte values or 1 of 2 provided.\r\n\r\n* `buffer` - (List) Array or buffer where UUID bytes are to be written.\r\n* `offset` - (Number) Starting index in `buffer` at which to begin writing.\r\n\r\nReturns `buffer`, if specified, otherwise the string form of the UUID\r\n\r\nExample: Generate string UUID with fully-specified options\r\n\r\n```dart\r\nuuid.v4(options: {\r\n  'random': [\r\n    0x10, 0x91, 0x56, 0xbe, 0xc4, 0xfb, 0xc1, 0xea,\r\n    0x71, 0xb4, 0xef, 0xe1, 0x67, 0x1c, 0x58, 0x36\r\n  ]\r\n});\r\n// -> \"109156be-c4fb-41ea-b1b4-efe1671c5836\"\r\n```\r\n\r\nExample: Generate two IDs in a single buffer\r\n\r\n```dart\r\nvar myBuffer = new List(32);\r\nuuid.v4(buffer: myBuffer);\r\nuuid.v4(buffer: myBuffer, offset: 16);\r\n```\r\n\r\n### uuid.v5(String namespace, String name, {Map options: null, List buffer: null, int offset: 0})\r\n\r\nGenerate and return a RFC4122 v5 UUID.\r\n\r\n* `options` - (Map) Optional uuid state to apply. Properties may include:\r\n\r\n  * `randomNamespace` - (Boolean) Default True. Returns if you want a v4 generated namespace (true) or NAMESPACE_NIL (false)\r\n\r\n* `buffer` - (List) Array or buffer where UUID bytes are to be written.\r\n* `offset` - (Number) Starting index in `buffer` at which to begin writing.\r\n\r\nReturns `buffer`, if specified, otherwise the string form of the UUID\r\n\r\nExample: Generate string UUID with fully-specified options\r\n\r\n```dart\r\nuuid.v5(uuid.NAMESPACE_URL, 'www.google.com');\r\n// -> \"c74a196f-f19d-5ea9-bffd-a2742432fc9c\"\r\n```\r\n\r\nExample: Generate two IDs in a single buffer\r\n\r\n```dart\r\nvar myBuffer = new List(32);\r\nuuid.v5(uuid.NAMESPACE_URL, 'www.google.com', buffer: myBuffer);\r\nuuid.v5(uuid.NAMESPACE_URL, 'www.google.com', buffer: myBuffer, offset: 16);\r\n```\r\n\r\n### uuid.parse(String uuid, {List buffer: null, int offset: 0})\r\n### uuid.unparse(List buffer, {int offset: 0})\r\n\r\nParse and unparse UUIDs\r\n\r\n  * `id` - (String) UUID(-like) string\r\n  * `buffer` - (List) Array or buffer where UUID bytes are to be written. Default: A new Array or Buffer is used\r\n  * `offset` - (Int | Number) Starting index in `buffer` at which to begin writing. Default: 0\r\n\r\nExample parsing and unparsing a UUID string\r\n\r\n```dart\r\nvar bytes = uuid.parse('797ff043-11eb-11e1-80d6-510998755d10'); // -> [121, 127, 240, 67, 17, 235, 17, 225, 128, 214, 81, 9, 152, 117, 93, 16]\r\nvar string = uuid.unparse(bytes); // -> '797ff043-11eb-11e1-80d6-510998755d10'\r\n```\r\n## Testing\r\n\r\nIn dartvm\r\n\r\n```\r\ndart test\\uuid_test.dart\r\n```\r\n\r\nIn Browser\r\n\r\nN/A as I have not used or tested this in the browser.\r\n\r\n### Benchmarking\r\n\r\nNot ready for this yet. My code is probably inefficient and messy in many areas. Though it should be pretty quick.\r\n\r\n## Release notes\r\nv0.1.1\r\n- Fixing syntax for upcoming breaking changes.\r\n\r\nv0.1.0\r\n- Cleanup, changes, and prep for M3.\r\n\r\nv0.0.9\r\n- Minor fix with a const RegExp\r\n- Made sure everything builds on latest dart.\r\n- Fixed pubspec to now import unittest from pub instead of sdk.\r\n\r\nv0.0.8\r\n- Changed to the new optional paramater syntaxes and usages.\r\n- Adjusted tests for the new function call style due to parameter change.\r\n- Fixed Import/Source/Library statements to the new format.\r\n\r\nv0.0.7\r\n- Made changes requested by the Google team to get my package up on pub.dartlang.org\r\n\r\nv0.0.6\r\n- Fixed up some code to make it possibly faster and using better Dart practices.\r\n- Cleaned up some documentation.\r\n\r\nv0.0.5\r\n- Added Initial AES for Dart (untested if it actually works/matches other AES encryptors)\r\n- Use AES cipher to create crypto strong bytes.\r\n\r\nv0.0.4\r\n- Issue wasn't Math.Random() but a bad reseed by me.\r\n- Cleaned up for new Pub layout.\r\n\r\nv0.0.3\r\n- Added UUIDv5\r\n- Fixed UUIDv4 bugs\r\n- Added more unit tests\r\n- Found bug in dart's Math.Random(), reported, waiting for fix to fix my code.\r\n\r\nv0.0.2\r\n- Initial tests\r\n- Fixed some parser bugs.\r\n\r\nv0.0.1\r\n- Initial Release\r\n- No tests\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}